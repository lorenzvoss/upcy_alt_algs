package de.upb.upcy.update.recommendation;

import static org.junit.Assert.*;

import de.upb.upcy.base.commons.CompressionUtils;
import de.upb.upcy.update.recommendation.check.UpdateCheck;
import de.upb.upcy.update.recommendation.compatabilityparser.Incompatibility;
import de.upb.upcy.update.recommendation.compatabilityparser.Parser;
import de.upb.upcy.update.recommendation.compatabilityparser.SigTestIncompatibility;
import de.upb.upcy.update.recommendation.exception.CompatabilityComputeException;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.Ignore;
import org.junit.Test;
import soot.BooleanType;
import soot.SootClass;
import soot.SootMethod;
import soot.Type;
import soot.VoidType;

@Ignore // only works with real db currently
public class CompatabilityCheckTest {

  @Test
  public void testParting() throws ParseException {
    String text =
        "Classes: 2\n"
            + "Constructs: 2\n"
            + "SigCheck Content\n"
            + "SignatureTest report\n"
            + "Base version: 10.0\n"
            + "Tested version: 10.0.1\n"
            + "Check mode: bin [throws removed]\n"
            + "Constant checking: on\n"
            + "\n"
            + "\n"
            + "Class com.google.common.collect.ForwardingMap$StandardEntrySet\n"
            + "  \"E1.2 - API type removed\" : method public boolean java.util.AbstractCollection.add({com.google.common.collect.ForwardingMap%0})\n"
            + "\n"
            + "Class com.google.common.collect.ForwardingMap$StandardValues\n"
            + "  \"E1.2 - API type removed\" : method public boolean java.util.AbstractCollection.add({com.google.common.collect.ForwardingMap%0})\n"
            + "\n"
            + "\n"
            + "\n"
            + "STATUS:Failed.2 errors\n";

    final Collection<SigTestIncompatibility> incompatibilities = Parser.parseSigCheckDocABI(text);
    assertNotNull(incompatibilities);
    assertFalse(incompatibilities.isEmpty());
  }

  @Test
  public void testFind1() throws IOException, ParseException {

    final String sigTestFileContent =
        "eJylUEFqwzAQvOsVi+8VhCY9GHpwXVECSSwsl7aUYhRr46ixJbNSkj6/Mrn03suyuzPMDKNs73Q8EzYYIhBOniJ70gHhghSsdzms+IIveS02olCCzTw0f9F7vliy8ojdCUZvMIe9dfAZj+SvISmO/oLmi5XehahdhG5mWtfn4B1jrBx0COCp52Gi9D6QHvHq6cTxZyIMs0uCcOAqDakpICWtg+3PpGMCGcBVU0qSva34A9xBYUzSgYPFwYQM8tsG03k/2C4dTg+QosR0fOuL5oN2PVdxNv9PDq5kvd69tOJd1kKpdbVry2or1xtRt9vqWbSyrqSom492V2wFPEJ2M/qr3/lxsgMSn4vMUjtMNUXzqnKZSkLDfwF4bJXy";
    Parser.parseSigCheckDocABI(CompressionUtils.decompressB64(sigTestFileContent));
  }

  @Test
  public void testFindOneMeth() throws IOException, ParseException {

    final String sigTestFileContent =
        "eJyNjjFrwzAQhXf9iiNTO1TgLAFtqWmhW0HuFDKcrautVNKZ08Vt/32VodCxvOHgveN7z8e5oF6FBqoKQiuLmkesBBtJjVwc7G2TueUU/roH2x1Mv9D0AZkDORhjgZMuwp+1kTJvFM6m51IVi8J0+4xldsDFGNMnrBUmzraQvqf4ZRNjGDFhmUisJ2lVXlGrAdg9dXYPD3B8fQH9XukXvwMHmXThAOt1THGC1qXtbBzDv+A2Yyx3F9zQtnC2XqVtPJ3v20Tjh+Pw5t0zxkTBdkAiLPUHlYFpwQ==";
    Parser.parseSigCheckDocABI(CompressionUtils.decompressB64(sigTestFileContent));
  }

  @Test
  public void testAnotherFindOneMeth() throws IOException, ParseException {

    final String sigTestFileContent =
        "";
    Parser.parseSigCheckDocABI(CompressionUtils.decompressB64(sigTestFileContent));
  }

  @Test
  public void testSigSource() throws IOException, ParseException {

    final String sigTestFileContent =
        "eJzVlrFu2zAQhnc+xQ0B6gApgRSdtCUpDHQIOkhthqLDibxKTCjSICnH6NOXcmTHlu1IEVwB5WJZpP77/uOJulQVBkPtKCMfwNHCusBu0RMsyXllTQLX/PoTa6ZJ7t38zO5KEk9QWUkJeCfgZyidffZgrKtQqz8kf7E7a3xAE0A0i5UpErCGsQd0Zv1ne7Goc60ECI3eg7AV91j5JxUjBl7VUSMK8IyqhcZAFykVFTWqaD4EyAloFcjIiJiTwDryC2sCKuMhlAS/rdb2OcaBiqqcXBJ/Q2klYO6DQxFgaZUcHJbTikQdaNb3wFWvYsxPiOxXj7hErix/cCqQu4T/PUOS4tKF0qdzdN9eXHwhrSr/kgGNpuBpcBHktlZarlPBbmTDfb8G8uzj7mBsoH7S+mmz+KabzqMcpcywmIkS3QHmSe5+sDnWqzZfCeyPMbA7cmdMf7+Nr0boOm7QpgZ2LI2xcUJuYkvNBMkjuzPO0p7cpFZSEiEe2cfqbIyVfblpnazXH31hRjnZlZvUyA90CnNNZ6qujtwUVrqfr+7xdWhlqNLghdzElmT2Sv4tf4ylOQB57vDokXuAvP3ydYP0M25icPECO1PmX6Pt7dw7CF+rZXwVvJ97WDOxhWz7rc1Ef9/VaafOaKGbpVGpvmRxpNlN9j1N5hjvyNhkAzlnnf8Lt+0zAA==";
    Parser.parseSigCheckDocSrc(CompressionUtils.decompressB64(sigTestFileContent));
  }

  @Test
  public void testSigSource3() throws IOException, ParseException {
    // commons-io 2.5 vs 2.11.0
    final String sigTestFileContent =
        "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";
    Parser.parseSigCheckDocSrc(CompressionUtils.decompressB64(sigTestFileContent));
  }

  @Test
  public void testSigSource2() throws IOException, ParseException {

    final String sigTestFileContent =
        "eJztWd9v2zYQftdfoYc+ZEAnrFvRAUJRzEnjZkDceLGzPQx7oKmzzEYmBYrynP31o37aEkmRTh2nKOKHIJKP3313PN4dzzMSUyRyDnPIhM8hZVx45ygDfwM8I4yG/tvgTfDLu2BMKEq8Qgyi7pe//lR/ebECfO+vWQShn3Hs/y1WnP2b+ZTxNUrIfxD9410wmglEhY8LYULj0GfU87wJyTL55F8kKMsg837sfjyPsICCEA8BXiFKIQlGi0xwhMUMuKRzUb1VxT7CEuWJGEURB4kcXdINJCwFo+TlBqi4Ziy1S3ziLNeKJRAjIc2pWU05W5MMPjNBlgS4usJiw3zFAUXTVmKAIqwXEEUQBZf1P0bQhGGUBNfFXxcZm9F7ohZrqHzTbN5nws4fBLjKuspN5FajeBhWig34sS9hsJrt6b2x2NKTdZWz2VKI16pnQsbJ2iZpsylj+B5E8BEJFPMBuEYuTxPY2qSqmJiVD1ZZJ6l6h2qxm1TIhGQTdrWpFj+EdLPESbjeCVc6tfghdJolHeE2y87yFDiuUq3PePVMqAC+RFjNvqbPXlZe5Msl8KCIwvN8OUqKdCAYD/3qo9CccpDyV4DS/hIT5hVLImgBdZi9wJ2i4nEHlwuyqxpNHQrNcIbI6sDcFlYAxXDBcum+KFRh6qIxJgncQqyBEoKTRS5ggtI96wYYfTXAFaJRIjM0k5S3fQ81BVNFNZZgPS/VN0ZeA9X5UCijnzGjOOcSRbS8y0x4uQWc74WqxVZNzXCCL5Nt6A7fS87H0GFsIxx1jfOiUwwV3D8ZadqMutMxY9XRJeXiYsfJBuolA1tar9mp6C110VaqsCMPww0420je1cm1c21HtxJ7PExcsGjASko2xE9AZW3Aldg1kf0/Bdth6ZBt1hxXhckQZ217caQoNhlkXGPWNpHxRUR58kzho2jrr3EInxsuiyNEAxltIDTNsIrBSsC7+8pJi5IN3LVYj28PewDSCWcUS80xUh1tx94ttWppLo2qDqsW9b7Z1zGTzWACczU6B7KxsqaMoLa1nIBYseiQC3xN+lXzfEcztOxGwLoE9dN8kRDsL4tpg7+RVcfakvRAA5ywDM4sfvvB9R76au9Vy/rUXL1Rcc3XD06+87FJizhH2f0fOeQwlpYx/nDwhKXz9S3gjflW8jKUeRnKfCdDmY6UvA0uSfwywPmmBzhVrj/K+EZTG5qwqPJ1R3UVHXttQaPNPIY5JLiGVCkafzuKTp2Dj2NlU5GLERPPi4Kk2xKN/5tKssVQnoaaCN4B+SlnAnDxG4x1dUAoEWdf0AYFCaJxIBORrK2vdy/mxc8zaJHA6wVjCSCqaXymQCO56i9OBJQVNlQpVZ2OfWlFyMS77WS0HeRx+sfWeV/Rlq3K4Vlp1SXnjJ9pHKpx5KO73ZP2ud2BSHscuozkqbANaaqVQQxigrZ1scxkr1S67ezRig32VOKOnDI9J2mUldaUpJAQCqEST/pN0q8OGL2jVRRFv9MFy2lUszFu2FVnYLt3hG8WXySB41xYnvFwPPp6ddLDkcosGYzJtu3fp/JFaIpR/WTu/c4hxdj0g0peq6XiPMoeKNadnnLNjKxlLdqn9hTMFC0Wat2eotcwdevt02eZx5Nx68dNichB72F5qdepqX3lzphTe/UQMifP5wd0uCf32wFknstvRc9cg+mvM4be/WS+PBLBb8S/WuLP5UsXMk/tNy+S1y2CkQCpuRLwszxNqxll6L/1PG82H83vZuEYEdlfBW9+fudD0Ylk/wN/si14";
    final Collection<Incompatibility> incompatibilities =
        Parser.parseSigCheckDocSrc(CompressionUtils.decompressB64(sigTestFileContent));
    assertNotNull(incompatibilities);
    assertFalse(incompatibilities.isEmpty());
    System.out.println(incompatibilities);
  }

  @Test
  public void SigTestSignatureParsing() {
    // example source: io.netty.channel.AbstractChannel$AbstractUnsafe:            method public
    // final
    // void io.netty.channel.AbstractChannel$AbstractUnsafe.close(io.netty.channel.ChannelPromise)
    final UpdateCheck.SigTestMethod sigTestMethod =
        UpdateCheck.parseSigTestMethodSignature(
            "public final void io.netty.channel.AbstractChannel$AbstractUnsafe.close(io.netty.channel.ChannelPromise)");
    System.out.println(sigTestMethod);
    // example bin:
    // method public final okhttp3.internal.ws.MessageInflater
    // okhttp3.internal.ws.WebSocketExtensions.newMessageInflater(boolean)

    final UpdateCheck.SigTestMethod sigTestMethod2 =
        UpdateCheck.parseSigTestMethodSignature(
            "public final okhttp3.internal.ws.MessageInflater okhttp3.internal.ws.WebSocketExtensions.newMessageInflater(boolean)");
    System.out.println(sigTestMethod2);
  }

  @Test
  public void testSignatureMatch() throws CompatabilityComputeException {

    // example bin:
    // method public final okhttp3.internal.ws.MessageInflater
    // okhttp3.internal.ws.WebSocketExtensions.newMessageInflater(boolean)

    { // should NOT match
      final SootClass sootClass = new SootClass("okhttp3.internal.ws.WebSocketExtensions");
      final SootMethod newMessageInflater =
          new SootMethod("newMessageInflater", Collections.emptyList(), VoidType.v());
      newMessageInflater.setDeclaringClass(sootClass);
      newMessageInflater.setDeclared(true);

      ArrayList<String> methodName = new ArrayList<>();
      methodName.add(
          "public final okhttp3.internal.ws.MessageInflater okhttp3.internal.ws.WebSocketExtensions.newMessageInflater(boolean)");
      Incompatibility incompatibility =
          new SigTestIncompatibility(
              "okhttp3.internal.ws.WebSocketExtensions",
              methodName,
              Collections.emptyList(),
              Collections.emptyList());

      CustomEdge customEdge = new CustomEdge();
      customEdge.getSrcTgtMethods().add(Pair.of(null, newMessageInflater));

      final List<SootMethod> sourceBinEdgeViolation =
          UpdateCheck.getSourceBinEdgeViolation(
              Collections.singletonList(incompatibility), customEdge);
      assertTrue(sourceBinEdgeViolation.isEmpty());
    }
    {
      final SootClass sootClassRet = new SootClass("okhttp3.internal.ws.MessageInflater");

      final SootClass sootClass = new SootClass("okhttp3.internal.ws.WebSocketExtensions");
      ArrayList<Type> params = new ArrayList<>();
      params.add(BooleanType.v());

      final SootMethod newMessageInflater =
          new SootMethod("newMessageInflater", params, sootClassRet.getType());
      newMessageInflater.setDeclaringClass(sootClass);
      newMessageInflater.setDeclared(true);

      ArrayList<String> methodName = new ArrayList<>();
      methodName.add(
          "public final okhttp3.internal.ws.MessageInflater okhttp3.internal.ws.WebSocketExtensions.newMessageInflater(boolean)");
      Incompatibility incompatibility =
          new SigTestIncompatibility(
              "okhttp3.internal.ws.WebSocketExtensions",
              methodName,
              Collections.emptyList(),
              Collections.emptyList());

      CustomEdge customEdge = new CustomEdge();
      customEdge.getSrcTgtMethods().add(Pair.of(null, newMessageInflater));

      final List<Incompatibility> incompatabilities = Collections.singletonList(incompatibility);
      final List<SootMethod> sourceBinEdgeViolation =
          UpdateCheck.getSourceBinEdgeViolation(incompatabilities, customEdge);
      assertFalse(sourceBinEdgeViolation.isEmpty());
    }
  }
}
